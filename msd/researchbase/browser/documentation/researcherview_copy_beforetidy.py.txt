from zope.interface import implements, Interface

from Products.Five import BrowserView
from Products.CMFCore.utils import getToolByName

from msd.researchertemplates import researchertemplatesMessageFactory as _

# actually, I just want to create a view that can be called from a skin template

# from five import grok

# grok.templatedir("templates")
#
#

class IResearcherView(Interface):
        
    # methods for core information about a researcher
    #
    def getFullName():
        """
        return fame name as string
        in ORA - foaf_name
        """

    def getLettersAfterName():
        """
        return post-nominals string
        in ORA - res_postNominals
        """

    def getJobTitle():
        """
        return comma-separated string of job-titles
        in ORA res_statusString (which is just a string anyway)
        """
        
    # methods for person_description

    def getGroupName():
        """
        returns the name of the PI's group if they have one
        in ORA - no equivalent?
        """

    def Description():
        """
        returns the short description of the researcher's work
        in ORA - dc_description
        """
        
    def getBiography():
        """
        """
        
    def getAcademicBackground():
        """ """

    def getFundingSources():
        """ """

class BaseResearcherView(BrowserView):
    """ Base view for ORA and MSD research views """
    implements(IResearcherView)
    
    def getFullName(self):
       
       return self.context.Title()

    def getLettersAfterName(self):
        
        raise NotImplementedError
    
    def getJobTitle(self):
       
       return self.context.getJobTitle() or ""
    
    def getGroupName(self):
       
       raise NotImplementedError
    
    def Description(self):
       
       return self.context.Description()
           

    def getBiography(self):
        """
        """
        
        self.context.getBiography()
        
    def getAcademicBackground(self):
        """ """
        
        self.context.getAcademicBackground()
                  
class IResearcherContactView(Interface):

    # methods for person_contact
    
    def getUnits():
        """
        returns a list of units
        - in ORA - foaf_member_pair
        """
    
    def getUnitsWithURLs():
        """
        returns a list of units with URLs (dicts?)
        - we will need to look up the URL from defaultlists.py
        - I think Mikko is going to provide a helper method for this in researchbase 
        """
    # methods to provide ready formatted lists of units (save templating work)
        
    def getUnitsFormatted():
        """
        returns a string of each unit separated by a comma
        """ 
        
    def getUnitsLinked():
        """
        returns a string of each unit tagged with <a>, separated by a comma
        """ 
    #   methods to return the college, we only expect one, if at all
        
    def getCollege():
        """
        returns the name of the PI's college as a string
        in ORA - at this stage it looks as if college isn't included in the json output
        """
        
    def getCollegeWithURL():
        """
        returns the name of the PI's college and a URL
        - the URL will probably need to be looked up in defaultlists.py
        - I think Mikko is going to provide a helper method for this in researchbase 
        
        """
    
    def hasCollege():
        """
        returns true if there is a valid college
        false if the college entry is blank or 'none'
        """
    
    def getUrl():
        """
        returns personal webpage
        in ORA - foaf_homepage
        (we expect valid url)
        """
    
    def getEmail():
        """
        returns email
        in ORA - foaf_mbox
        (we expect valid email)
        """
    
    def getPhone():
        """
        returns phone
        in ORA - con_phone
        (string, no validation required)
        """
    
    def getFax():
        """
        returns fax
        in ORA - con_fax
        (string, no validation required)
        """
    
    def getContact_address():
        """
        returns contact address, as a string, each line separated by a comma
        in ORA - con_address
        """

        
# it doesn't look as if ORA has the PA name or details
    
    def getPa_name():
        """
        returns name of PA
        in ORA?
        (string)
        """
    
    def getPa_fax():
        """
        returns PA fax
        in ORA?
        (string)
        """
    
    def getPa_email():
        """
        returns PA email
        in ORA?
        (valid email address)
        """
        
class BaseResearcherContactView(BrowserView):
    implements(IResearcherContactView)
    
    def __init__(self, context, request):
        self.context = context
        self.request = request
        
        
        #TODO: Not sure if these should be in the init
        self.settings = self.context.getResearchSettings()        
        self.unitData = self.settings.getVocabularyAsDictionary("departmentVocabulary")
        self.collegeData = self.settings.getVocabularyAsDictionary("collegeVocabulary")

    
    def getUnits(self):
        """
        returns a list of units
        - in ORA - foaf_member_pair
        """
        raise NotImplementedError

    def getUnitsWithURLs(self):
        """
        returns a list of units with URLs (dicts?)
        
        @return:[{"name":"..", "url":"http..."},...]
        """
        
        units = self.context.getUnits()
        
        unitsWithURLs = []
        
        for unit in units:
            data = self.unitData.get(unit, None)
            if data:
                unitsWithURLs.append(data)
                
        return unitsWithURLs
        
    def getUnitsFormatted(self):
        """
        returns a string of each unit separated by a comma
        """
        
        units = self.getUnitsWithURLs()
        
        return ", ".join( [unit["name"] for unit in units] )
        
         
        
    def getUnitsLinked(self):
        """
        returns a string of each unit tagged with <a>, separated by a comma

        TODO: Should units without url be skipped or return without <a>?
        """ 

        units = self.getUnitsWithURLs()

        return [ "<a href='%(url)s'>%(name)s</a>" % unit for unit in units]

    def getCollege(self):
        """
        returns the name of the PI's college as a string
        in ORA - at this stage it looks as if college isn't included in the json output
        """
        raise NotImplementedError        
        
        
    def getCollegeWithURL(self):
        """
        returns the name of the PI's college and a URL
        
        """
        
        pass
        
    
    def hasCollege(self):
        """
        returns true if there is a valid college
        false if the college entry is blank or 'none'
        """
        
        return self.getCollege() != ""
    
    def getUrl(self):
        """
        returns personal webpage
        in ORA - foaf_homepage
        (we expect valid url)
        """
        
        raise NotImplementedError
        
    
    def getEmail(self):
        """
        returns email
        in ORA - foaf_mbox
        (we expect valid email)
        """
        
        return self.context.getEmail()
    
    def getPhone(self):
        """
        returns phone
        in ORA - con_phone
        (string, no validation required)
        """
        
        return self.context.getPhone()
    
    def getFax(self):
        """
        returns fax
        in ORA - con_fax
        (string, no validation required)
        """
        
        return self.context.getFax()
    
    def getContactAddress(self):
        """
        returns contact address, as a string, each line separated by a comma
        in ORA - con_address
        """
        
        return self.context.getContact_address()

        
# it doesn't look as if ORA has the PA name or details
    
    def getPaName(self):
        """
        returns name of PA
        in ORA?
        (string)
        """
        
        return self.context.getPa_name()
    
    def getPaFax(self):
        """
        returns PA fax
        in ORA?
        (string)
        """
        
        return self.context.getPa_phone()
    
    def getPaEmail(self):
        """
        returns PA email
        in ORA?
        (valid email address)
        """
        
        return self.context.getPa_email()
    

class IResearcherCollaborationsView(Interface):


    # There's a bit of an anomaly here
    # in ora: ox_collaboratesWith":["Liset Pengel","Nish Talawila","Liang Liu",]
    # so basically you don't get much. However
    # msd researcher gives you slightly more:
    # ["fullName", "url", "email", "role", "institution", "type"]
    
    def getCollaborations():
        """
        return a list of dicts?
        [{fullname:(string),role:(string),url:(valid url),institution:(string),type:(string)},]
        NOTE: we don't include email in this as we want to keep this behind the scenes as much as possible
        the idea is to use it as an identifier
        ORA will only have the fullname in each dict.
        Is there a clever way to ensure that the templates aren't tripped up by this?
        """
        
    
    def getGroupMembers():
        """
        listCollaborations but filtered for type == Group Member
        not relevant for ORA which should return an empty list
        """
    
    def getPastGroupMembers():
        """
        listCollaborations but filtered for type == Past Group Member
        not relevant for ORA which should return an empty list
        """
    
    def getCollaborators():
        """
        listCollaborations but filtered for type == Collaborator
        not relevant for ORA which should return an empty list
        """
    
class BaseResearcherCollaborationsView(BrowserView):
    implements(IResearcherCollaborationsView)

    # There's a bit of an anomaly here
    # in ora: ox_collaboratesWith":["Liset Pengel","Nish Talawila","Liang Liu",]
    # so basically you don't get much. However
    # msd researcher gives you slightly more:
    # ["fullName", "url", "email", "role", "institution", "type"]
    
    def __init__(self, context, request):
        self.context = context
        self.request = request
        
        
        #TODO: Not sure if these should be in the init
        self.settings = self.context.getResearchSettings()        
        self.unitData = self.settings.getVocabularyAsDictionary("departmentVocabulary")    
    
    def getCollaborations(self):
        """
        return a list of dicts?
        [{fullname:(string),role:(string),url:(valid url),institution:(string),type:(string)},]
        NOTE: we don't include email in this as we want to keep this behind the scenes as much as possible
        the idea is to use it as an identifier
        ORA will only have the fullname in each dict.
        Is there a clever way to ensure that the templates aren't tripped up by this?
        
        TODO: add implementation
        """
        
        return []
    
    def getGroupMembers(self):
        """
        listCollaborations but filtered for type == Group Member
        not relevant for ORA which should return an empty list
        """
        #TODO: Not sure if it is better give base view logic here or raise NotImplementedError
        return []
    
    def getPastGroupMembers(self):
        """
        listCollaborations but filtered for type == Past Group Member
        not relevant for ORA which should return an empty list
        """
        #TODO: Not sure if it is better give base view logic here or raise NotImplementedError
        return []
    
    def getCollaborators(self):
        """
        listCollaborations but filtered for type == Collaborator
        not relevant for ORA which should return an empty list
        """
        #TODO: Not sure if it is better give base view logic here or raise NotImplementedError
        return []


class IThemeDisplay(Interface):
    """Theme Labels
    """
    def getThemesLabel(self, fieldname, default):
        """
        looks up and returns a label
        """
    
    def getThemesList(self, fieldname):
        """
        looks up and returns a list of themes
        """
    def displayThemes(self, fieldname):
        """the display is set to true AND there is some content
        """


#class IResearcherView(Interface):
#    """
#    researcher view interface
#    """
#    # methods for person_description
#    
#    def getGroup_name():
#        """
#        returns the name of the PI's group if they have one
#        in ORA - no equivalent?
#        """
#    
#    def Description():
#        """
#        returns the short description of the researcher's work
#        in ORA - dc_description
#        """
# methods for person_contact
#
# TO DO:
# what format do we want units in?
# how can we obtain the department or unit name
# from the actual website
    
#    def getUnits():
#        """
#        returns a list of units
#        """
#    def getCollege():
#        """
#        returns the name of the PI's college
#        in ORA - bit complicated - probably need to extract from
#        foaf_member
#        """
#    
#    def hasCollege():
#        """
#        is there a valid college
#        """
#    
#    def getUrl():
#        """
#        returns personal webpage
#        in ORA - foaf_homepage
#        (we expect valid url)
#        """
#    
#    def getEmail():
#        """
#        returns email
#        in ORA - foaf_mbox
#        (we expect valid email)
#        """
#    
#    def getPhone():
#        """
#        returns phone
#        in ORA -
#        (string)
#        """
#    
#    def getFax():
#        """
#        returns fax
#        in ORA
#        (string)
#        """
#    
#    def getPa_name():
#        """
#        returns name of PA
#        in ORA
#        (string)
#        """
#    
#    def getPa_fax():
#        """
#        returns PA fax
#        in ORA
#        (string)
#        """
#    
#    def getPa_email():
#        """
#        returns PA email
#        in ORA
#        (valid email address)
#        """
#    
#    def getContact_address():
#        """
#        returns email
#        in ORA - foaf_mbox
#        """

# methods for person_header
#
#    def getFullname():
#        """
#        return fame name as string
#        """
#    
#    def getLetters_after_name():
#        """
#        return post-nominals string
#        """
#    
#    def getJobtitle():
#        """
#        return comma-separated string of job-titles
#        (straightforward for msd.researcher)
#        """
## methods for person_funding
## TO DO: what format do we want these in?
#    
#    def fundingSources():
#        """
#        return funding sources
#        """
## methods for person_biography
##
#    def getBiography():
#        """
#        return html text
#        """
#    
#    def getAcademicBackground():
#        """
#        This is what we want
#        <li><span tal:content="row/startYear"/><span tal:condition="row/endYear">- <span tal:content="row/endYear"/></span>
#          <span tal:content="row/award" /><span tal:condition="row/institution">, <span tal:content="row/institution" /></span>
#        </li>
#        
#        """
#
# methods for person_research
# I haven't worked out how to do images yet...
# <a href="#"
#   tal:define="here_url context/@@plone_context_state/object_url;"
#   tal:attributes="href string:$here_url/image/image_view_fullscreen">
#  <img tal:replace="structure python: view.tag(scale='mini', css_class='photo')" src="" alt="" />
#</a>

    
#    def getImageCaption():
#        """
#        return string
#        """
#    
#    def getSummary():
#        """
#        return html text
#        """
#    
#    def tag():
#        """ method to tag image"""
#        
#        # methods for person_collaborations
#        # should be some utility for checking URL prefix..
#        #
#        #
#
## TO DO - what exactly is this?
#    
#    def listCollaborations(collabs):
#        """
#        return a list of strings
#        
#        """
#    
#    def groupMembers():
#        """
#        This is what we're after:
#        <tal:define define="fullname row/fullName;
#                               url row/url;
#                               role row/role;">
#           <li><a tal:omit-tag="not: url" tal:attributes="href python:here.checkURLPrefix(url)"><span tal:content="fullname" /></a><span tal:condition="role">,
#           <span tal:omit-tag='' tal:content="role" /></span>
#           </li>
#           </tal:define>
#        
#        """
#    
#    def pastGroupMembers():
#        """
#        <tal:define define="fullname row/fullName;
#                               url row/url;
#                               role row/institution;">
#           <li><a tal:omit-tag="not: url" tal:attributes="href python:here.checkURLPrefix(url)"><span tal:content="fullname" /></a><span tal:condition="role">,
#           <span tal:omit-tag='' tal:content="role" /></span>
#           </li>
#           </tal:define>
#        """
#    
#    def allCollaborators():
#        """
#        <tal:define define="fullname row/fullName;
#                               url row/url;
#                               role row/institution;">
#           <li><a tal:omit-tag="not: url" tal:attributes="href python:here.checkURLPrefix(url)"><span tal:content="fullname" /></a><span tal:condition="role">,
#           <span tal:omit-tag='' tal:content="role" /></span>
#           </li>
#           </tal:define>
#        """



class researcherView(BrowserView):
    """
    researcher browser view
    
    NB - THIS ISN'T IN USE - the browser views are written into the content type
    """
    #grok.context(IResearcher)
    
    implements(IResearcherView)
    
    def __init__(self, context, request):
        self.context = context
        self.request = request
    
    @property
    def portal_catalog(self):
        return getToolByName(self.context, 'portal_catalog')
    
    @property
    def portal(self):
        return getToolByName(self.context, 'portal_url').getPortalObject()

# methods for person_description
    
    def getGroup_name(self):
        """
        returns the name of the PI's group if they have one
        in ORA - no equivalent?
        """
        
        return self.context.getGroup_name()
    
    def Description(self):
        """
        returns the short description of the researcher's work
        in ORA - dc_description
        """
        
        return self.context.Description()

# methods for person_contact
#
    def getUnits(self):
        
        return self.context.getUnits()
    
    def getCollege(self):
        """
        returns the name of the PI's college
        in ORA - bit complicated - probably need to extract from
        foaf_member
        """
        
        return self.context.getCollege()
    
    def hasCollege(self):
        
        if self.getCollege():
            if self.getCollege() == 'none':
                return False
            else:
                return True
        return False
    
    def getUrl(self):
        """
        returns personal webpage
        in ORA - foaf_homepage
        """
        
        return self.context.getUrl()
    
    def getEmail(self):
        """
        returns email
        in ORA - foaf_mbox
        """
        
        return self.context.getEmail()
    
    def getPhone(self):
        
        return self.context.getPhone()
    
    def getFax(self):
        
        return self.context.getFax()
    
    def getPa_name(self):
        
        return self.context.getPa_name()
    
    def getPa_fax(self):
        
        return self.context.getPa_fax()
    
    def getPa_email(self):
        
        return self.context.getPa_email()
    
    def getContact_address(self):
        
        return self.context.getContact_address()

# methods for person_header
#
    def getFullname(self):
        
        return self.context.title_or_id()
    
    def getLetters_after_name(self):
        
        return self.context.getLetters_after_name()
    
    def getJobtitle(self):
        
        jobtitleList = []
        
        if self.context.getJob_title():
            
            jobtitleList.append(self.context.getJob_title())
        
        if self.context.getUniv_job_title():
            
            jobtitleList.append(self.context.getUniv_job_title())
        
        if self.context.getInstitution():
            
            jobtitleList.append(self.context.getInstitution())
        
        return ', '.join(jobtitleList)

# methods for person_funding
#
    def fundingSources(self):
        
        return self.context.getFundingSources()

# methods for person_biography
#
    def getBiography(self):
        
        return self.context.getBiography()
    
    def getAcademicBackground(self):
        
        """
        This is what we want
        <li><span tal:content="row/startYear"/><span tal:condition="row/endYear">- <span tal:content="row/endYear"/></span>
          <span tal:content="row/award" /><span tal:condition="row/institution">, <span tal:content="row/institution" /></span>
        </li>
        
        """
        
        academicBackground = []
        
        for x in self.context.getAcademicBackground():
            academicBackground.append(x['award'])
        
        return academicBackground
#
# methods for person_research
# I haven't worked out how to do images yet...
# <a href="#"
#   tal:define="here_url context/@@plone_context_state/object_url;"
#   tal:attributes="href string:$here_url/image/image_view_fullscreen">
#  <img tal:replace="structure python: view.tag(scale='mini', css_class='photo')" src="" alt="" />
#</a>
    
    def tag(self, **kwargs):
        """Generate image tag using the api of the ImageField
        """
        if 'title' not in kwargs:
            kwargs['title'] = self.getImageCaption()
        
        return self.context.getField('image').tag(self.context, **kwargs)
    
    def getImageCaption(self):
        
        return self.context.getImageCaption()
    
    def getSummary(self):
        
        return self.context.getSummary()



# methods for person_interests
#
    def getInterests(self):
        
        return self.context.getInterests()

# methods for person_collaborations
# should be some utility for checking URL prefix..
#
#
    
    def listCollaborations(self, collabs):
        
        """
        return a list of strings
        NB the groupMembers are slightly different from the pastGroupMembers and AllCollaborators
        
        """
        collabList = []
        
        for collab in collabs:
            
            collabList.append(collab['fullName'])
        
        return collabList
    
    def groupMembers(self):
        
        """
        This is what we're after:
        <tal:define define="fullname row/fullName;
                               url row/url;
                               role row/role;">
           <li><a tal:omit-tag="not: url" tal:attributes="href python:here.checkURLPrefix(url)"><span tal:content="fullname" /></a><span tal:condition="role">,
           <span tal:omit-tag='' tal:content="role" /></span>
           </li>
           </tal:define>
        
        """
        
        return listCollaborations(self.context.getGroupMembers())
    
    def pastGroupMembers(self):
        
        """
        <tal:define define="fullname row/fullName;
                               url row/url;
                               role row/institution;">
           <li><a tal:omit-tag="not: url" tal:attributes="href python:here.checkURLPrefix(url)"><span tal:content="fullname" /></a><span tal:condition="role">,
           <span tal:omit-tag='' tal:content="role" /></span>
           </li>
           </tal:define>
        """
        
        return listCollaborations(self.context.getPastGroupMembers())
    
    def allCollaborators(self):
        
        """
        <tal:define define="fullname row/fullName;
                               url row/url;
                               role row/institution;">
           <li><a tal:omit-tag="not: url" tal:attributes="href python:here.checkURLPrefix(url)"><span tal:content="fullname" /></a><span tal:condition="role">,
           <span tal:omit-tag='' tal:content="role" /></span>
           </li>
           </tal:define>
        """
        
        return listCollaborations(self.context.getAllCollaborators())
#
# methods for person_themes
# not required because we already call a view for this researcher_theme_labels

# methods for person_additonal
#
    def getAdditional_info(self):
        
        return self.context.getAdditional_info()

# methods for person_seealso
# this uses the standard compute related items,
# so we could leave it for the time-being

# methods for person_bibliography
# again, we might be able to leave this

class ThemeDisplay(BrowserView):
    """Hopefully these will deliver the appropriate labels for themes
       I could maybe take the first two methods out and make them a base class
       Then I could do even fancier things.... hum
    """
    
    implements(IThemeDisplay)
    
    def getTool(self):
        return getToolByName(self.context, 'portal_rdslocaltool')
    
    def returnColValue(self, fieldname, default, colname, fieldselector):
        thetool = self.getTool()
        
        show = default
        
        if thetool:
            theselector = thetool.getField(fieldselector)
            fieldlist = theselector.get(thetool)
            
            for x in fieldlist:
                if x['fieldName'] == fieldname:
                    show = x[colname]
        
        return show
       
    
    def getThemesLabel(self, fieldname, default):
        return self.returnColValue(fieldname, default, 'labelText', 'researcherFieldSelector')
        
    
    def getThemesList(self, fieldname):
        f = self.context.getField(fieldname)
        return f.get(self.context)
    
    def displayThemes(self, fieldname):
        """the display is set to true AND there is some content
        """
        isDisplayed = self.returnColValue(fieldname, 1, 'display', 'researcherFieldSelector')
        hasContent = self.getThemesList(fieldname)
        
        return isDisplayed and hasContent
       

from msd.programme.utilities import getResearcherProgrammes 

class Programmes(BrowserView):
    """
    A test/sample view how to display programmers for a certain researcher.
    """       
    
    
    def getProgrammes(self):
        """
                
        """
        programmes = getResearcherProgrammes(self.context)
        return programmes
        